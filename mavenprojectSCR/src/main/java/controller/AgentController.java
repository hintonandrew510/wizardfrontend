package web.controller;

import java.sql.SQLException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.data.MyUserPrincipal;
import web.google.slide.GoogleProfile;
import web.model.Agent;
import web.model.Wizard;
import web.page.JSONManager;
import web.repository.AgentRepository;
import web.service.AgentServiceImpl;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class AgentController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private AgentServiceImpl agentRepository;
	@Autowired

	private static final Logger mLog = LoggerFactory.getLogger(AgentController.class.getName());
	
	@RequestMapping(value = "/googleprofile", method = RequestMethod.GET)
	public String profile(Model model, Authentication authentication) 
	{
		mLog.info("starting googleprofile");
		MyUserPrincipal userDetails = (MyUserPrincipal) authentication.getPrincipal();
		//agent.setContactId(contact.getContactId());
		Agent agent = userDetails.getAgent();
		mLog.info("Agent " + agent.getAddress());
		GoogleProfile dataPageModel = null;
		if (agent.getGoogleprofile() != null) {
			dataPageModel = (GoogleProfile) JSONManager.convertFromJson(agent.getGoogleprofile(),
					GoogleProfile.class);

		}
		
		model.addAttribute("agent", agent);
		model.addAttribute("dataPageModel", dataPageModel);
		
		
		
		

		return "googleprofile";
	}
	
	@RequestMapping(value = "/saveGoogleProfile", method = RequestMethod.POST)
	public String update(
			@RequestParam(required = true) String sheetsId,
			@RequestParam(required = true) String slidesId,
			@RequestParam(required = true) String generatedFolderId,
			@RequestParam(required = true) String targetMarketingWant26to35ToWant36to45,
			@RequestParam(required = true) String targetMarketingWant36to45ToWant46to55,
			@RequestParam(required = true) String targetMarketingWant46to55ToWant55Plus,
			@RequestParam(required = true) String targetMarketingWant19to25ToWant26to35,
			@RequestParam(required = true) String targetMarketingWant12to18ToWant19to25,
			Authentication authentication)
			throws SQLException {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		mLog.info("starting saveGoogleProfile");
		
		
		GoogleProfile googleProfile = new GoogleProfile(slidesId, sheetsId,  generatedFolderId
				,targetMarketingWant26to35ToWant36to45
				,targetMarketingWant36to45ToWant46to55
				,targetMarketingWant46to55ToWant55Plus
				, targetMarketingWant19to25ToWant26to35
				, targetMarketingWant12to18ToWant19to25) ;
		String dataGoogleProfileJSon = JSONManager.convertToJson(googleProfile);
	
		MyUserPrincipal userDetails = (MyUserPrincipal) authentication.getPrincipal();
		Agent agent = userDetails.getAgent();
		agent.setGoogleprofile(dataGoogleProfileJSon);
		agentRepository.save(agent);
		mLog.info("agent  updated");
		// String encodeId = URLEncoder.encode(wizard.getEncrypt(),
		// StandardCharsets.UTF_8);


////PresentedToPage?ID=PresentedToPage
		return "redirect:/dispalyGoogleVerification";

	}

	

}

package web.page.targetmarketingpage;

import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class TargetMarketingPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = LoggerFactory.getLogger(TargetMarketingPageController.class.getName());

	@RequestMapping(value = "/TargetMarketingPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID, HttpSession session) {
		mLog.info("starting detail");
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.TargetMarketingPage.getPageSequence(), wizard.getWizardid());
		TargetMarketingPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (TargetMarketingPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					TargetMarketingPageModel.class);

		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/TargetMarketingPage";
	}

	@RequestMapping(value = "/saveTargetMarketingPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId, @RequestParam String wizarddataid,
			@RequestParam(value = "excluded", required = false) String excluded,
			@RequestParam(name = "pctMen") String pctMenStr, @RequestParam(name = "pctWomen") String pctWomenStr
			/* , @RequestParam (name="householdIncome") String householdIncomeStr, */
			, @RequestParam(required = false, value = "householdIncome", defaultValue = "") String householdIncome,
			@RequestParam String describeIdealTargetConsumer, @RequestParam(name = "have12to18") String have12to18Str,
			@RequestParam(name = "have19to25") String have19to25Str,
			@RequestParam(name = "have26to35") String have26to35Str,
			@RequestParam(name = "have36to45") String have36to45Str,
			@RequestParam(name = "have46to55") String have46to55Str,
			@RequestParam(name = "have56Plus") String have56PlusStr,
			@RequestParam(name = "want12to18") String want12to18Str,
			@RequestParam(name = "want19to25") String want19to25Str,
			@RequestParam(name = "want26to35") String want26to35Str,
			@RequestParam(name = "want36to45") String want36to45Str,
			@RequestParam(name = "want46to55") String want46to55Str,
			@RequestParam(name = "want55Plus") String want55PlusStr, @RequestParam String nextPage,
			@RequestParam String publishPage, @RequestParam String previousPage,
			@RequestParam(required = false, value = "previous") String previous,
			@RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish, HttpSession session) {

		int pctMen = 0;
		if (!pctMenStr.equals("")) {
			pctMen = Integer.parseInt(pctMenStr);
		}

		int pctWomen = 0;
		if (!pctWomenStr.equals("")) {
			pctWomen = Integer.parseInt(pctWomenStr);
		}
		/*
		 * tinas int householdIncome = 0; if (!householdIncomeStr.equals("")) {
		 * householdIncome = Integer.parseInt(householdIncomeStr); } tinas
		 */
		int have12to18 = 0;
		if (!have12to18Str.equals("")) {
			have12to18 = Integer.parseInt(have12to18Str);
		}
		int have19to25 = 0;
		if (!have19to25Str.equals("")) {
			have19to25 = Integer.parseInt(have19to25Str);
		}
		int have26to35 = 0;
		if (!have26to35Str.equals("")) {
			have26to35 = Integer.parseInt(have26to35Str);
		}
		int have36to45 = 0;
		if (!have36to45Str.equals("")) {
			have36to45 = Integer.parseInt(have36to45Str);
		}

		int have46to55 = 0;
		if (!have46to55Str.equals("")) {
			have46to55 = Integer.parseInt(have46to55Str);
		}

		int have56Plus = 0;
		if (!have56PlusStr.equals("")) {
			have56Plus = Integer.parseInt(have56PlusStr);
		}
		int want12to18 = 0;
		if (!want12to18Str.equals("")) {
			want12to18 = Integer.parseInt(want12to18Str);
		}
		int want19to25 = 0;
		if (!want19to25Str.equals("")) {
			want19to25 = Integer.parseInt(want19to25Str);
		}
		int want26to35 = 0;
		if (!want26to35Str.equals("")) {
			want26to35 = Integer.parseInt(want26to35Str);
		}
		int want36to45 = 0;
		if (!want36to45Str.equals("")) {
			want36to45 = Integer.parseInt(want36to45Str);
		}
		int want46to55 = 0;
		if (!want46to55Str.equals("")) {
			want46to55 = Integer.parseInt(want46to55Str);
		}
		int want55Plus = 0;
		if (!want55PlusStr.equals("")) {
			want55Plus = Integer.parseInt(want55PlusStr);
		}

		// internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage = publishPage;
		}
		if (previous != null) {
			internalNextPage = previousPage;
		}

		WizardData wizardData = new WizardData();
		boolean shouldExclude = excluded != null ? true: false;
		wizardData.setExcluded(shouldExclude);
		wizardData.setPagename(PageNameEnum.TargetMarketingPage.toString());
		wizardData.setPagesequence(Pages.TargetMarketingPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		wizardId = session.getAttribute("ID").toString();
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		TargetMarketingPageModel pageModel = new TargetMarketingPageModel(pctMen, pctWomen, householdIncome,
				describeIdealTargetConsumer, have12to18, have19to25, have26to35, have36to45, have46to55, have56Plus,
				want12to18, want19to25, want26to35, want36to45, want46to55, want55Plus);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

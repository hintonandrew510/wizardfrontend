package web.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;



@Controller // This means that this class is a Controller

public class CategoryController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CategoryRepository categoryRepository;

	@GetMapping(path = "/addCategory") // Map ONLY GET Requests
	public String add(@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Category n = new Category();
		n.setName(name);

		categoryRepository.save(n);

		return "redirect:/allCategories";
	}
	
	
	
	@GetMapping(path = "/updateCategory") // Map ONLY GET Requests
	public String update(@RequestParam(name = "ID", required = true) Integer id, @RequestParam(name ="name", required=true) String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Category n = new Category();
		n.setName(name);
		n.setId(id);

		categoryRepository.save(n);

		return "redirect:/allCategories";
	}

	

	@GetMapping(path = "/detailCategory") // Map ONLY GET Requests
	public String detail(@RequestParam(name = "ID", required = true) Integer id, Model model) {
		Category category = categoryRepository.findById(id).get();

		model.addAttribute("category", category);

		return "detailCategoryPage";
	}

	@GetMapping(path = "/allCategoriesJSON")
	public @ResponseBody Iterable<Category> getAllUsers() {
		// This returns a JSON or XML with the users
		return categoryRepository.findAll();
	}

	@GetMapping(path = "/allCategories")
	public String getAll(Model model) {
		
		//sort by name
		Sort sort = new Sort(Direction.ASC, "name");
		
		Iterable<Category> categories = categoryRepository.findAll(sort);
	
		
		model.addAttribute("categories", categories);

		return "categories";

	}

}

package web.client;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.net.URLConnection;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.List;
import java.util.logging.Level;
import javax.net.ssl.HttpsURLConnection;

import java.util.logging.Logger;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

public class SoapManager {
	/**
     * class logger
     */
    private static Logger log = Logger.getLogger("SoapManager");

    //ignore the certificate checks
    public static void ignoreCertificateCheck() {
        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
        //Create a trust manager that does not validate certificate chains:
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {

                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                    return;
                }

                public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                    return;
                }
            }//X509TrustManager
        };//TrustManager[]
        //Install the all-trusting trust manager:
        SSLContext sc = null;
        try {
            sc = SSLContext.getInstance("SSL");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SoapManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sc.init(null, trustAllCerts, new SecureRandom());
        } catch (KeyManagementException ex) {
            Logger.getLogger(SoapManager.class.getName()).log(Level.SEVERE, null, ex);
        }
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

        //avoid "HTTPS hostname wrong: should be <myhostname>" exception:
        HostnameVerifier hv = new HostnameVerifier() {

            public boolean verify(String urlHostName, SSLSession session) {
                if (!urlHostName.equalsIgnoreCase(session.getPeerHost())) {
                    System.out.println("Warning: URL host '" + urlHostName + "' is different to SSLSession host '" + session.getPeerHost() + "'.");
                }
                return true; //also accept different hostname (e.g. domain name instead of IP address)
            }
        };
        HttpsURLConnection.setDefaultHostnameVerifier(hv);


    }
    public static String sendSSL(WebClient soap) {
        StringBuffer buffer = new StringBuffer(); // log buffer
        String response = null;
        StringBuffer messageBuffer = new StringBuffer();// soap message builder
        try {
            log.info("#######################  Start wed service debugging");
            buffer.append("#######################  Start wed service debugging");
            buffer.append("\n\r");
            // First create the connection
            log.info("#######################  try to create Soap Connection");
            URL url = new URL(soap.getUrl().trim());
            HttpsURLConnection urlConnection = (HttpsURLConnection) url.openConnection();

            //URLConnection urlConnection = url.openConnection();
            // establish connection parameters
            log.info("#######################  try to create Soap Connection");
            urlConnection.setDoOutput(true);
            urlConnection.setDoInput(true);
            //these are doNet or java web service
           // urlConnection.setRequestProperty("Content-type", "text/xml");
            // set operation is passed in by form
            //build header information
            @SuppressWarnings("unchecked")
			
            HeaderMaster headerMaster = (HeaderMaster)WebClientHeader.convertFromJson(soap.getHeader());
            
             
            
            
            for (Header header : headerMaster.getHeaderList()) {
            	urlConnection.setRequestProperty(header.getKey(), header.getValue());
            	log.info("##################### header [" + header.getKey().trim() + " " +   header.getValue() + "]");
            }
            
            
           
            
            
            
            
            // setup message
            OutputStream outputStream = urlConnection.getOutputStream();
            Writer messageWriter = new OutputStreamWriter(outputStream);
            // write to message object
            messageBuffer.append("");
          
            // write to the message stream
            log.info("#######################  write to the message stream");
            messageWriter.write(messageBuffer.toString());
             
            log.info("##################### message ");
            log.info(messageBuffer.toString());
          
            // send the message
            log.info("#######################  send the message");
            messageWriter.flush();
            messageWriter.close();
            // get the soap reply
            log.info("#######################  get the soap reply");
            // save the entire message for display
            java.io.ByteArrayOutputStream outMessageStream = new java.io.ByteArrayOutputStream();
            InputStream inputStream = urlConnection.getInputStream();


            int c;
            while ((c = inputStream.read()) != -1) {
                outMessageStream.write(c);
            }
            inputStream.close();

            response = outMessageStream.toString();
            outMessageStream.close();
            log.info("###########;############  get the soap reply [ " + outMessageStream.toString() + "]");


        } catch (Exception e) {
            String errorMessage = "<error>"
                    + e.getMessage() + "</error>";
            log.severe(errorMessage);
           

            e.printStackTrace();

        }
        return response;
    }

}

package web.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;



@Controller // This means that this class is a Controller

public class WebClientController {
	
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CategoryRepository categoryRepository;
	
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WebClientRepository webClientRepository;
	
	//@RequestMapping(value="/requestotp",method = RequestMethod.POST) 
	
	
	@RequestMapping(path = "/addWebClient",method = RequestMethod.POST, produces = "application/json") // Map ONLY GET Requests
	@ResponseBody
	public String add(@RequestParam(name ="name", required=true) String name
			, @RequestParam(name ="url", required=true) String url
			, @RequestParam(name ="author", required=true) String author
			, @RequestParam(name ="category", required=true) String category
			, @RequestParam(name ="controltype", required=true) String controltype
			, @RequestParam(name ="controltypevalue", required=true) String controltypevalue
			, @RequestParam(name ="soapaction", required=false) String soapaction
			, @RequestParam(name ="soapactionvalue", required=false) String soapactionvalue
			, @RequestParam(name ="headerone", required=false) String headerone
			, @RequestParam(name ="headeronevalue", required=false) String headeronevalue
			, @RequestParam(name ="headertwo", required=false) String headertwo
			, @RequestParam(name ="headertwovalue", required=false) String headertwovalue
			, @RequestParam(name ="requestmessage", required=false) String requestmessage) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		WebClient webClient = new WebClient();
		webClient.setAuthorId(Integer.getInteger(author));
		webClient.setCategoryId(Integer.getInteger(category));
		webClient.setUrl(url);
		webClient.setMessage(requestmessage);
		webClient.setName(name);
		
		//create header
		WebClientHeader webClientHeader = new WebClientHeader();
		webClientHeader.add(controltype, controltypevalue);
		if (soapaction != null 
				&& !soapaction.trim().isEmpty()
				&& soapactionvalue != null
				&& !soapactionvalue.trim().isEmpty()) {
		webClientHeader.add(soapaction, soapactionvalue);
		}
		if (headerone != null 
				&& !headerone.trim().isEmpty()
				&& headeronevalue != null
				&& !headeronevalue.trim().isEmpty()) {
		webClientHeader.add(headerone,headeronevalue);
		}
		if (headertwo != null 
				&& !headertwo.trim().isEmpty()
				&& headertwovalue != null
				&& !headertwovalue.trim().isEmpty()) {
		webClientHeader.add(headertwo, headertwovalue);
		}
        
		String headerJson = webClientHeader.convertToJson();
		
		webClient.setHeader(headerJson);
		
		
		webClientRepository.save(webClient);
	

		return headerJson;
	}

	
	

	

	


	@GetMapping(path = "/createWebClient")
	public String getAll(Model model) {
		
		//sort by name
		Sort sort = new Sort(Direction.ASC, "name");
		
		Iterable<Category> categories = categoryRepository.findAll(sort);
		Iterable<User> users = userRepository.findAll(sort);
		
		model.addAttribute("categories", categories);
		model.addAttribute("users", users);

		return "createWebService";

	}

}

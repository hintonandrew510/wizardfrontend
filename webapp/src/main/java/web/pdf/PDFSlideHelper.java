package web.pdf;

import java.util.HashMap;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;

import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;

import web.model.WizardData;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.page.marketplacecompetitionpage.MarketPlaceCompetitionPageModel;
import web.page.presentedtopage.PresentedToPageController;
import web.page.presentedtopage.PresentedToPageModel;
import web.page.strategicmarketingpageone.StrategicMarketingPageOneModel;
import web.page.teamcommitmentpage.TeamCommitmentPageModel;
import web.repository.WizardDataRepository;

public class PDFSlideHelper  {
	private int _idInt;
	 public static void fixText(String text, int x, int y,PdfWriter writer,int size) {
		    try {
		        PdfContentByte cb = writer.getDirectContent();
		        BaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
		        cb.saveState();
		        cb.beginText();
		        cb.moveText(x, y);
		        cb.setFontAndSize(bf, size);
		        cb.showText(text);
		        cb.endText();
		        cb.restoreState();
		    } catch (Exception e) {
		        e.printStackTrace();
		    }
		}
	public PDFSlideHelper(int idInt) {
		this._idInt = idInt;
		getModelsFromDatabase();
	}
    private java.util.Map _pageModelMap = new HashMap<PageNameEnum, Object>();
    private static final Logger mLog = Logger.getLogger(PresentedToPageController.class.getName());
    @Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;
    public Object getModel(PageNameEnum pageNameEnum) {
    	
    	Object pageModel = this._pageModelMap.get(pageNameEnum);
    	return pageModel;
    }
    
    private void getModelsFromDatabase () {
		Iterable<WizardData> dataPages = wizardDataRepository.findByWizardid(this._idInt);
		for (WizardData data : dataPages) {
			// pull of data model
			PageNameEnum pageName = null;
			try {
				pageName = PageNameEnum.valueOf(data.getPagename());
			} catch (Exception ex) {
				mLog.severe("error " + ex.getMessage());
				continue;
			}
			mLog.info("page name = " + pageName);
			switch (pageName) {
			case PresentedToPage:
				PresentedToPageModel presentedToPageModel = null;

				presentedToPageModel = (PresentedToPageModel) JSONManager.convertFromJson(data.getPagedata(),
						PresentedToPageModel.class);
				this._pageModelMap.put(PageNameEnum.PresentedToPage, presentedToPageModel);
	
				mLog.info("found page PresentedToPage");
				break;
			case TeamCommitmentPage:
				TeamCommitmentPageModel teamCommitmentPageModel = null;

				teamCommitmentPageModel = (TeamCommitmentPageModel) JSONManager.convertFromJson(data.getPagedata(),
						TeamCommitmentPageModel.class);
				this._pageModelMap.put(PageNameEnum.TeamCommitmentPage, teamCommitmentPageModel);
				
				mLog.info("found page TeamCommitmentPage");
				break;
			case StrategicMarketingPageOne:
				StrategicMarketingPageOneModel strategicMarketingPageOneModel = null;

				strategicMarketingPageOneModel = (StrategicMarketingPageOneModel) JSONManager.convertFromJson(data.getPagedata(),
						StrategicMarketingPageOneModel.class);
				this._pageModelMap.put(PageNameEnum.StrategicMarketingPageOne, strategicMarketingPageOneModel);
				
				mLog.info("value found page StrategicMarketingPageOne " + strategicMarketingPageOneModel.getYearsInBusiness());
				break;				
			case MarketPlaceCompetitionPage:
				MarketPlaceCompetitionPageModel marketPlaceCompetitionPageModel = null;

				marketPlaceCompetitionPageModel = (MarketPlaceCompetitionPageModel) JSONManager
						.convertFromJson(data.getPagedata(), MarketPlaceCompetitionPageModel.class);
				this._pageModelMap.put(PageNameEnum.MarketPlaceCompetitionPage, marketPlaceCompetitionPageModel);
					mLog.info("found page MarketPlaceCompetitionPageModel");
				break;
			}

		}
    }
}

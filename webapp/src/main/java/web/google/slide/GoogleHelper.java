package web.google.slide;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.ui.Model;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.model.Comment;
import com.google.api.services.drive.model.CommentList;
import com.google.api.services.drive.model.File;
import com.google.api.services.slides.v1.model.BatchUpdatePresentationRequest;
import com.google.api.services.slides.v1.model.Request;

import web.model.WizardData;
import web.page.ChartBuilder;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.page.PieChart;
import web.page.Publish;
import web.page.PublishController;
import web.page.clientobjectivesonepage.ClientObjectivesOnePageModel;
import web.page.clientobjectivesonepage.ClientObjectivesOnePageTwoModel;
import web.page.clientobjectivesonepage.ClientObjectivesPageHelper;
import web.page.confidentialclientevaluationnonepage.ConfidentialClientEvaluationOnePageModel;
import web.page.extra.ExtraPageModel;
import web.page.marketplacecompetitionpage.MarketPlaceCompetitionPageModel;
import web.page.planABEPPage.PlanABEPPageModel;
import web.page.planBBEPPage.PlanBBEPPageModel;
import web.page.planDigitalroicalculatorpage.PlanDigitalROICalculatorPageModel;
import web.page.planalifetimevaluedpage.PlanALifetimeValuedPageModel;
import web.page.planamedipage.MediaChart;
import web.page.planamedipage.MediaChartHelper;
import web.page.planamedipage.PlanMediaPageModel;
import web.page.planbLifetimevaluedpage.PlanBLifetimeValuedPageModel;
import web.page.planproposedpage.PlanProposedPageModel;
import web.page.presentedtopage.PresentedToPageModel;
import web.page.strategicmarketingpageone.StrategicMarketingPageOneModel;
import web.page.strategicmarketingpagethree.StrategicMarketingHelper;
import web.page.strategicmarketingpagethree.StrategicMarketingPageThreeModel;
import web.page.strategicmarketingpagetwo.StrategicMarketingPageTwoModel;
import web.page.targetmarketingpage.TargetMarketingHeaderRow;
import web.page.targetmarketingpage.TargetMarketingPageModel;
import web.page.teamcommitmentpage.TeamCommitmentPageModel;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.util.EncryptionDecryptionManager;
import web.util.EnvUtil;

public class GoogleHelper {
	private static final Logger mLog = Logger.getLogger(GoogleHelper.class.getName());
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;
	@Autowired
	private Environment env;

	// inject it,
	@Autowired
	private EnvUtil envUtil;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	private List<Request> mRequests = new ArrayList<Request>();

	/*
	 * Get logon email address
	 */
	public static String emailAddress(GoogleTokenResponse tokenResponse) {
		String email = null;
		try {
			GoogleIdToken idToken = tokenResponse.parseIdToken();
			GoogleIdToken.Payload payload = idToken.getPayload();
			email = payload.getEmail();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			mLog.severe(e.getMessage());
		}
		//
		// String userId = payload.getSubject(); // Use this value as a key to identify
		// a user.
		// mLog.info("userId " + userId);
		// String email = payload.getEmail();
		return email;
	}

	/**
	 * Retrieve a list of comments.
	 *
	 * @param service Drive API service instance.
	 * @param fileId  ID of the file to retrieve comments for.
	 * @return List of comments.
	 */
	public static Map<String, String> retrieveComments(Drive service, String fileId) {
		CommentList comments;
		Map<String, String> slides = new HashMap<String, String>();

		// fileId = "gb1e46e2962_1_0";
		mLog.info("retreiveComments start fileId [" + fileId + "]");
		try {
			comments = service.comments().list(fileId).setFields("*").execute();
			mLog.info("after service.comments().list(fileId).setFields(\"*\").execute()");
			// service.comments().list(fileId).
			List<Comment> commentList = comments.getComments();
			mLog.info("commentList  [" + commentList.size() + "]");
			for (Comment comment : commentList) {
				String desc = comment.getContent();
				mLog.info("desc [" + desc + "]");
				
				
				String[] pageNameAndPageId = desc.split("\\.");
				
				mLog.info("pageNameAndPageId length [" + pageNameAndPageId.length + "]");
				if (pageNameAndPageId != null && pageNameAndPageId.length > 0) {
					slides.put(pageNameAndPageId[0], pageNameAndPageId[1]);
					mLog.info("pagename [" + pageNameAndPageId[0] + "]");
					mLog.info("pageId [" + pageNameAndPageId[1] + "]");
				}
				
			}
			return slides;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			mLog.severe("error " + e.getMessage());
		}
		return null;
	}

	/**
	 * Copy an existing file.
	 *
	 * @param service      Drive API service instance.
	 * @param originFileId ID of the origin file to copy.
	 * @param copyTitle    Title of the copy.
	 * @return The copied file if successful, {@code null} otherwise.
	 */
	public static File copyFile(Drive service, String originFileId, String copyName, String generatedFolderId)
			throws Exception {
		File copiedFile = new File();
		copiedFile.setName(copyName);
		// destinate folder
		copiedFile.setParents(Collections.singletonList(generatedFolderId));

		try {
			return service.files().copy(originFileId, copiedFile).execute();
		} catch (IOException e) {
			mLog.severe("ERROR cannot find file " + e.getMessage());
			throw new Exception(e);
		}

	}

	public List<Request> updateSlides(String ID) {
		Integer idInt = Integer.parseInt(ID);
		String encryptId = EncryptionDecryptionManager.encrypt(ID);
		encryptId = EncryptionDecryptionManager.encode(encryptId);

		Publish publish = new Publish();
		// get all pages
		Iterable<WizardData> dataPages = wizardDataRepository.findByWizardid(idInt);
		for (WizardData data : dataPages) {
			// pull of data model
			PageNameEnum pageName = null;
			try {
				pageName = PageNameEnum.valueOf(data.getPagename());
			} catch (Exception ex) {
				mLog.severe("error " + ex.getMessage());
				continue;
			}

			// exculded
			if (data.isExcluded()) {
				mLog.info("PAGE Excluded name = " + pageName);
				continue;
			}
			switch (pageName) {

			// ConfidentialClientEvaluationOnePage
			case ClientObjectivesOnePage:
				try {

					ClientObjectivesOnePageModel clientObjectivesOnePageModel = null;
					clientObjectivesOnePageModel = (ClientObjectivesOnePageModel) JSONManager
							.convertFromJson(data.getPagedata(), ClientObjectivesOnePageModel.class);
					List<ClientObjectivesOnePageTwoModel> orderList = ClientObjectivesPageHelper.getList(true,
							clientObjectivesOnePageModel);

					List<Object> pageData = new ArrayList<Object>();
					pageData.add(clientObjectivesOnePageModel);
					pageData.add(orderList);

					SlideData slideData = new SlideData(data.isExcluded(), pageData);

					SlideInterface slideInterface = new ClientObjectivesOneSlide();

					List<Request> requests = slideInterface.updateSlide(slideData);
					// loop thru add and add to master request
					for (Request request : requests) {
						mRequests.add(request);
					}

					mLog.info("found page ClientObjectivesOnePageTwoModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case ConfidentialClientEvaluationOnePage:
				try {
					ConfidentialClientEvaluationOnePageModel confidentialClientEvaluationOnePageModel = null;

					confidentialClientEvaluationOnePageModel = (ConfidentialClientEvaluationOnePageModel) JSONManager
							.convertFromJson(data.getPagedata(), ConfidentialClientEvaluationOnePageModel.class);
					List<PieChart> pieChart = ChartBuilder
							.buildLastYearConfidentialClientEvaluation(confidentialClientEvaluationOnePageModel);

					// model.addAttribute("ConfidentialClientEvaluationOnePageLastYearChartModel",
					// pieChart);
					// model.addAttribute("ConfidentialClientEvaluationOnePageModel", pieChart);
					// model.addAttribute("ConfidentialClientEvaluationPageDataModel",
					// confidentialClientEvaluationOnePageModel);

					if (pieChart.size() > 0) {
						publish.setConfidentialClientEvaluationOnePage(true);
					}

					// confidentialClientEvaluationProposedPage
					List<PieChart> pieChartProposed = ChartBuilder
							.buildNextYearConfidentialClientEvaluation(confidentialClientEvaluationOnePageModel);

					// model.addAttribute("ConfidentialClientEvaluationOnePageLastYearChartProposedModel",
					// pieChartProposed);
					// model.addAttribute("ConfidentialClientEvaluationOnePageModel",
					// pieChartProposed);

					if (pieChartProposed.size() > 0) {
						publish.setConfidentialClientEvaluationProposedPage(true);
					}

					mLog.info("found page ConfidentialClientEvaluationOnePageModel");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case CreateConceptOnePage:
				try {
					ExtraPageModel createConceptOnePageModel = null;

					createConceptOnePageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("CreateConceptOnePageModel", createConceptOnePageModel);

					publish.setCreateConceptOnePage(true);
					mLog.info("found page createConceptOnePageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case CreateConceptTwoPage:
				try {
					ExtraPageModel createConceptTwoPageModel = null;

					createConceptTwoPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("CreateConceptTwoPageModel", createConceptTwoPageModel);

					publish.setCreateConceptTwoPage(true);
					mLog.info("found page createConceptTwoPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case DigitalMobileSocialStrategiesPage:
				try {
					ExtraPageModel digitalMobileSocialStrategiesPageModel = null;

					digitalMobileSocialStrategiesPageModel = (ExtraPageModel) JSONManager
							.convertFromJson(data.getPagedata(), ExtraPageModel.class);
					// model.addAttribute("DigitalMobileSocialStrategiesPageModel",
					// digitalMobileSocialStrategiesPageModel);
					mLog.info("found page digitalMobileSocialStrategiesPage");

					publish.setDigitalMobileSocialStrategiesPage(true);

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case MarketPlaceCompetitionPage:
				try {
					MarketPlaceCompetitionPageModel marketPlaceCompetitionPageModel = null;

					marketPlaceCompetitionPageModel = (MarketPlaceCompetitionPageModel) JSONManager
							.convertFromJson(data.getPagedata(), MarketPlaceCompetitionPageModel.class);
					// model.addAttribute("MarketPlaceCompetitionPageModel",
					// marketPlaceCompetitionPageModel);

					publish.setMarketPlaceCompetitionPage(true);
					mLog.info("found page MarketPlaceCompetitionPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case MarketingStrategiesPage:
				try {
					ExtraPageModel marketingStrategiesPageModel = null;

					marketingStrategiesPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("MarketingStrategiesPageModel",
					// marketingStrategiesPageModel);
					mLog.info("found page marketingStrategiesPageModel");

					publish.setMarketingStrategiesPage(true);

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanABEPPage:
				try {
					PlanABEPPageModel planABEPPageModel = null;

					planABEPPageModel = (PlanABEPPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanABEPPageModel.class);
					// model.addAttribute("PlanABEPPageModel", planABEPPageModel);

					publish.setPlanABEPPage(true);
					mLog.info("found page PlanABEPPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanADigitalROICalculatorPage:
				try {
					PlanDigitalROICalculatorPageModel planADigitalROICalculatorPageModel = null;

					planADigitalROICalculatorPageModel = (PlanDigitalROICalculatorPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanDigitalROICalculatorPageModel.class);
					// model.addAttribute("PlanADigitalROICalculatorPage",
					// planADigitalROICalculatorPageModel);

					publish.setPlanADigitalROICalculatorPage(true);

					mLog.info("found page PlanADigitalROICalculatorPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanAExcelPage:
				try {
					ExtraPageModel planAExcelPageModel = null;

					planAExcelPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					String textArea = planAExcelPageModel.getTextArea();
					textArea = textArea.replaceAll("\\r\\n", "");
					// mLog.info("text planAExcelPageModel [" + textArea + "]");
					// planAExcelPageModel.setTextArea(textArea);
					// model.addAttribute("PlanAExcelPageModel", planAExcelPageModel);

					publish.setPlanAExcelPage(true);
					mLog.info("found page planAExcelPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanAProposedPage:
				try {
					PlanProposedPageModel planAProposedPageModel = null;

					planAProposedPageModel = (PlanProposedPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanProposedPageModel.class);
					// model.addAttribute("PlanAProposedPageModel", planAProposedPageModel);

					publish.setPlanAProposedPage(true);
					mLog.info("found page planAProposedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBProposedPage:
				try {
					PlanProposedPageModel planBProposedPageModel = null;

					planBProposedPageModel = (PlanProposedPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanProposedPageModel.class);
					// model.addAttribute("PlanBProposedPageModel", planBProposedPageModel);

					// publish.setPlanBProposedPage(true);
					mLog.info("found page planBProposedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanALifetimeValuedPage:
				try {
					PlanALifetimeValuedPageModel planALifetimeValuedPageModel = null;

					planALifetimeValuedPageModel = (PlanALifetimeValuedPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanALifetimeValuedPageModel.class);
					// model.addAttribute("PlanALifetimeValuedPageModel",
					// planALifetimeValuedPageModel);

					mLog.info("found page PlanALifetimeValuedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

//PlanBDigitalROICalculatorPage

				//
			case PlanBLifetimeValuedPage:
				try {
					PlanBLifetimeValuedPageModel planBLifetimeValuedPageModel = null;

					planBLifetimeValuedPageModel = (PlanBLifetimeValuedPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanBLifetimeValuedPageModel.class);
					// model.addAttribute("PlanBLifetimeValuedPageModel",
					// planBLifetimeValuedPageModel);

					mLog.info("found page PlanBLifetimeValuedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
				//
			case PlanBExcelPage:
				try {
					ExtraPageModel planBExcelPagePageModel = null;

					planBExcelPagePageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("PlanBExcelPageModel", planBExcelPagePageModel);

					mLog.info("found page PlanAExcelPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBBEPPage:
				try {
					PlanBBEPPageModel planBBEPPageModel = null;

					planBBEPPageModel = (PlanBBEPPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanBBEPPageModel.class);
					// model.addAttribute("PlanBBEPPageModel", planBBEPPageModel);

					publish.setPlanBBEPPage(true);
					mLog.info("found page PlanBBEPPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBDigitalROICalculatorPage:
				try {
					PlanDigitalROICalculatorPageModel planBDigitalROICalculatorPageModel = null;

					planBDigitalROICalculatorPageModel = (PlanDigitalROICalculatorPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanDigitalROICalculatorPageModel.class);
					// model.addAttribute("PlanBDigitalROICalculatorPage",
					// planBDigitalROICalculatorPageModel);

					publish.setPlanBDigitalROICalculatorPage(true);
					mLog.info("found page PlanBDigitalROICalculatorPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanAMediaPage:
				mLog.info("found page PlanAMediaPage");
				try {
					PlanMediaPageModel planAMediaPagedataPageModel = null;
					planAMediaPagedataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanMediaPageModel.class);
					MediaChart mediaChartA = MediaChartHelper.generate(planAMediaPagedataPageModel);
					// model.addAttribute("PlanAMediaPage", mediaChartA);
					// model.addAttribute("PlanAMediaPagedataPageModel",
					// planAMediaPagedataPageModel);
					if (mediaChartA != null) {

						publish.setPlanAMediaPage(true);
						mLog.info("found page PlanAMediaPage");

					}
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

				// PlanAProposedPage
			case PlanBMediaPage:
				mLog.info("found page PlanBMediaPage");
				try {
					PlanMediaPageModel planBMediaPagedataPageModel = null;
					planBMediaPagedataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanMediaPageModel.class);
					MediaChart mediaChart = MediaChartHelper.generate(planBMediaPagedataPageModel);
					// model.addAttribute("PlanBMediaPagedataPageModel",
					// planBMediaPagedataPageModel);
					// model.addAttribute("PlanBMediaPage", mediaChart);
					if (mediaChart != null) {

						publish.setPlanBMediaPage(true);
						mLog.info("found page PlanBMediaPage");

					}
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PresentedToPage:
				try {
					PresentedToPageModel presentedToPageModel = null;

					presentedToPageModel = (PresentedToPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PresentedToPageModel.class);
					// model.addAttribute("PresentedToPage", presentedToPageModel);

					publish.setPresentedToPage(true);

					mLog.info("found page PresentedToPage");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case ProfileOfConsumersPage:
				try {
					ExtraPageModel profileOfConsumersPageModel = null;

					profileOfConsumersPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("ProfileOfConsumersPageModel",
					// profileOfConsumersPageModel);

					publish.setProfileOfConsumersPage(true);

					mLog.info("found page profileOfConsumersPageModel");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case StrategicMarketingPageOne:
				try {
					StrategicMarketingPageOneModel strategicMarketingPageOneModel = null;

					strategicMarketingPageOneModel = (StrategicMarketingPageOneModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageOneModel.class);
					// model.addAttribute("StrategicMarketingPageOne",
					// strategicMarketingPageOneModel);

					publish.setStrategicMarketingPageOne(true);

					mLog.info("value found page StrategicMarketingPageOne "
							+ strategicMarketingPageOneModel.getYearsInBusiness());
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case StrategicMarketingPageThree:
				try {
					StrategicMarketingPageThreeModel strategicMarketingPageThreeModel = null;

					strategicMarketingPageThreeModel = (StrategicMarketingPageThreeModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageThreeModel.class);
					// model.addAttribute("StrategicMarketingPageThree",
					// strategicMarketingPageThreeModel);

					StrategicMarketingHelper strategicMarketingHelper = new StrategicMarketingHelper(
							strategicMarketingPageThreeModel);
					// model.addAttribute("StrategicMarketingHelper", strategicMarketingHelper);

					publish.setStrategicMarketingPageThree(true);
					mLog.info("found page StrategicMarketingPageThree");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case StrategicMarketingPageTwo:
				mLog.info("start StrategicMarketingPageTwo");

				try {
					StrategicMarketingPageTwoModel strategicMarketingPageTwoModel = null;

					strategicMarketingPageTwoModel = (StrategicMarketingPageTwoModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageTwoModel.class);
					// model.addAttribute("StrategicMarketingPageTwo",
					// strategicMarketingPageTwoModel);

					publish.setStrategicMarketingPageTwo(true);
					mLog.info("found page StrategicMarketingPageTwo");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case TargetMarketingPage:
				try {
					TargetMarketingPageModel targetMarketingPageModel = null;

					targetMarketingPageModel = (TargetMarketingPageModel) JSONManager
							.convertFromJson(data.getPagedata(), TargetMarketingPageModel.class);
					// model.addAttribute("targetMarketingPageModel", targetMarketingPageModel);
					TargetMarketingHeaderRow targetMarketingHeaderRow = new TargetMarketingHeaderRow(
							targetMarketingPageModel);

					// model.addAttribute("targetMarketingHeaderRow", targetMarketingHeaderRow);

					publish.setTargetMarketingPage(true);
					mLog.info("found page targetMarketingPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case TeamCommitmentPage:
				try {
					TeamCommitmentPageModel teamCommitmentPageModel = null;

					teamCommitmentPageModel = (TeamCommitmentPageModel) JSONManager.convertFromJson(data.getPagedata(),
							TeamCommitmentPageModel.class);
					// model.addAttribute("TeamCommitmentPage", teamCommitmentPageModel);

					publish.setTeamCommitmentPage(true);
					mLog.info("found page TeamCommitmentPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			}
			// model.addAttribute("PublishModel", publish);

		}
		// BatchUpdatePresentationRequest update = new BatchUpdatePresentationRequest();
		// update.setRequests(mRequests);
		// googleSlides.presentations().batchUpdate(prez.getPresentationId(),
		// update).execute();
		return mRequests;
	}

}

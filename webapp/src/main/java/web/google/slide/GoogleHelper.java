package web.google.slide;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.ui.Model;

import com.google.api.client.googleapis.auth.oauth2.GoogleIdToken;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.services.drive.Drive;
import com.google.api.services.drive.model.Comment;
import com.google.api.services.drive.model.CommentList;
import com.google.api.services.drive.model.File;
import com.google.api.services.slides.v1.model.BatchUpdatePresentationRequest;
import com.google.api.services.slides.v1.model.Request;

import web.google.slide.pages.EightConfidentialClientEvaluationOneSlide;
import web.google.slide.pages.FourClientObjectiveSlide;
import web.google.slide.pages.NineConfidentialClientEvaluationProposedSlide;
import web.google.slide.pages.OnePresentedToSlide;
import web.google.slide.pages.SeventeenPlanAMediaSlide;
import web.google.slide.pages.ThreeMarketPlaceCompetitionSlide;
import web.google.slide.pages.TwentyThreePlanBMediaSlide;
import web.google.slide.pages.TwoTeamCommitmentSlide;
import web.model.Wizard;
import web.model.WizardData;
import web.page.ChartBuilder;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.page.PieChart;
import web.page.Publish;
import web.page.PublishController;
import web.page.clientobjectivesonepage.ClientObjectivesOnePageModel;
import web.page.clientobjectivesonepage.ClientObjectivesOnePageTwoModel;
import web.page.clientobjectivesonepage.ClientObjectivesPageHelper;
import web.page.confidentialclientevaluationnonepage.ConfidentialClientEvaluationOnePageModel;
import web.page.extra.ExtraPageModel;
import web.page.marketplacecompetitionpage.MarketPlaceCompetitionPageModel;
import web.page.planABEPPage.PlanABEPPageModel;
import web.page.planBBEPPage.PlanBBEPPageModel;
import web.page.planDigitalroicalculatorpage.PlanDigitalROICalculatorPageModel;
import web.page.planalifetimevaluedpage.PlanALifetimeValuedPageModel;
import web.page.planamedipage.MediaChart;
import web.page.planamedipage.MediaChartHelper;
import web.page.planamedipage.PlanMediaPageModel;
import web.page.planbLifetimevaluedpage.PlanBLifetimeValuedPageModel;
import web.page.planproposedpage.PlanProposedPageModel;
import web.page.presentedtopage.PresentedToPageModel;
import web.page.strategicmarketingpageone.StrategicMarketingPageOneModel;
import web.page.strategicmarketingpagethree.StrategicMarketingHelper;
import web.page.strategicmarketingpagethree.StrategicMarketingPageThreeModel;
import web.page.strategicmarketingpagetwo.StrategicMarketingPageTwoModel;
import web.page.targetmarketingpage.TargetMarketingHeaderRow;
import web.page.targetmarketingpage.TargetMarketingPageModel;
import web.page.teamcommitmentpage.TeamCommitmentPageModel;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.util.EncryptionDecryptionManager;
import web.util.EnvUtil;

public class GoogleHelper {
	private static final Logger mLog = Logger.getLogger(GoogleHelper.class.getName());
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;
	@Autowired

	private Environment env;

	// inject it,
	@Autowired
	private EnvUtil envUtil;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	private List<Request> mRequests = new ArrayList<Request>();

	/**
	 * 
	 * @param mediaChart
	 * @return
	 */
	public static List<Object> writeJan(MediaChart mediaChart) throws Exception {
		if (mediaChart.getJanColor() == null) {
			mLog.severe("null Jan data");
			throw new Exception("null Jan data");

		}
		List<Object> dataRowJan = new ArrayList<>();
		dataRowJan.add("Jan");
		String janColor = mediaChart.getJanColor();
		switch (janColor) {
		case "green":
			dataRowJan.add(mediaChart.getJan());
			dataRowJan.add(0);
			dataRowJan.add(0);
			break;
		case "red":
			dataRowJan.add(0);
			dataRowJan.add(mediaChart.getJan());
			dataRowJan.add(0);
			break;
		case "blue":
			dataRowJan.add(0);
			dataRowJan.add(0);
			dataRowJan.add(mediaChart.getJan());
			break;
		}
		return dataRowJan;

	}

	/**
	 * 
	 * @param mediaChart
	 * @return
	 * @throws Exception
	 */
	public static List<Object> writeFeb(MediaChart mediaChart) throws Exception {
		if (mediaChart.getFebColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Feb");
		String color = mediaChart.getFebColor();
		switch (color) {
		case "green":
			dataRow.add(mediaChart.getFeb());
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(mediaChart.getFeb());
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(mediaChart.getFeb());
			break;
		}
		return dataRow;

	}

	public static List<Object> writeMar(MediaChart mediaChart) throws Exception {
		if (mediaChart.getMarColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Mar");
		String color = mediaChart.getMarColor();
		int value = mediaChart.getMar();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeApr(MediaChart mediaChart) throws Exception {
		if (mediaChart.getAprColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Apr");
		String color = mediaChart.getAprColor();
		int value = mediaChart.getApr();

		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeMay(MediaChart mediaChart) throws Exception {
		if (mediaChart.getMayColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("May");
		String color = mediaChart.getMayColor();
		int value = mediaChart.getMay();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeJun(MediaChart mediaChart) throws Exception {
		if (mediaChart.getJunColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Jun");
		String color = mediaChart.getJunColor();
		int value = mediaChart.getJun();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeJul(MediaChart mediaChart) throws Exception {
		if (mediaChart.getJulColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Jul");
		String color = mediaChart.getJulColor();
		int value = mediaChart.getJul();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeAug(MediaChart mediaChart) throws Exception {
		if (mediaChart.getAugColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Aug");
		String color = mediaChart.getAugColor();
		int value = mediaChart.getAug();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeSep(MediaChart mediaChart) throws Exception {
		if (mediaChart.getSepColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Sep");
		String color = mediaChart.getSepColor();
		int value = mediaChart.getSep();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeOct(MediaChart mediaChart) throws Exception {
		if (mediaChart.getOctColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Oct");
		String color = mediaChart.getOctColor();
		int value = mediaChart.getOct();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeNov(MediaChart mediaChart) throws Exception {
		if (mediaChart.getNovColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Nov");
		String color = mediaChart.getNovColor();
		int value = mediaChart.getNov();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	public static List<Object> writeDec(MediaChart mediaChart) throws Exception {
		if (mediaChart.getDecColor() == null) {
			mLog.severe("null data");
			throw new Exception("null data");

		}
		List<Object> dataRow = new ArrayList<>();
		dataRow.add("Dec");
		String color = mediaChart.getDecColor();
		int value = mediaChart.getDec();
		switch (color) {
		case "green":
			dataRow.add(value);
			dataRow.add(0);
			dataRow.add(0);
			break;
		case "red":
			dataRow.add(0);
			dataRow.add(value);
			dataRow.add(0);
			break;
		case "blue":
			dataRow.add(0);
			dataRow.add(0);
			dataRow.add(value);
			break;
		}
		return dataRow;

	}

	/**
	 * 
	 * @param tokenResponse
	 * @return Get logon email address
	 */
	public static String emailAddress(GoogleTokenResponse tokenResponse) {
		String email = null;
		try {
			GoogleIdToken idToken = tokenResponse.parseIdToken();
			GoogleIdToken.Payload payload = idToken.getPayload();
			email = payload.getEmail();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			mLog.severe(e.getMessage());
		}
		//
		// String userId = payload.getSubject(); // Use this value as a key to identify
		// a user.
		// mLog.info("userId " + userId);
		// String email = payload.getEmail();
		return email;
	}

	/**
	 * Retrieve a list of comments.
	 *
	 * @param service Drive API service instance.
	 * @param fileId  ID of the file to retrieve comments for.
	 * @return List of comments.
	 * @throws RetrieveCommentsException
	 */
	public static Map<String, String> retrieveComments(Drive service, String fileId) throws RetrieveCommentsException {
		mLog.entering(GoogleSlideController.class.getName(), "retrieveComments");
		mLog.warning("entering retrieveComments");
		CommentList comments;

		Map<String, String> slides = new HashMap<String, String>();

		// fileId = "gb1e46e2962_1_0";
		mLog.info("retreiveComments start fileId [" + fileId + "]");
		try {
			comments = service.comments().list(fileId).setFields("*").execute();
			mLog.info("after service.comments().list(fileId).setFields(\"*\").execute()");
			// service.comments().list(fileId).
			List<Comment> commentList = comments.getComments();
			mLog.info("commentList  [" + commentList.size() + "]");
			for (Comment comment : commentList) {
				String desc = comment.getContent();
				mLog.info("desc [" + desc + "]");

				String[] pageNameAndPageId = desc.split("\\.");

				mLog.info("pageNameAndPageId length [" + pageNameAndPageId.length + "]");
				if (pageNameAndPageId != null && pageNameAndPageId.length > 0) {
					slides.put(pageNameAndPageId[0], pageNameAndPageId[1]);
					mLog.info("pagename [" + pageNameAndPageId[0] + "]");
					mLog.info("pageId [" + pageNameAndPageId[1] + "]");
				}

			}
			mLog.exiting(GoogleSlideController.class.getName(), "retrieveComments");
			mLog.warning("exiting retrieveComments");
			return slides;
		} catch (IOException e) {

			mLog.severe("error " + e.getMessage());
			mLog.warning("exiting retrieveComments");
			throw new RetrieveCommentsException(e.getMessage());
		}
	}

	/**
	 * 
	 * @return today date
	 */
	public static String getDateTime() {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
		Date date = new Date(System.currentTimeMillis());
		return formatter.format(date);
	}

	HashMap<String, String> map = new HashMap<String, String>();

	private HashMap<String, String> getLabelMap() {
		if (map.isEmpty()) {

			map.put("introduceNewDepartmentLabel", "Introduce New Department/Products/Services");
			map.put("featureSpecificProductsLabel", "Feature Specific Products/Services");
			map.put("callAttentiontoBrandsPrivateLabelsCarriedLabel",
					"Call Attention to Brands/Private Labels Carried");
			map.put("promoteOffPriceItemsServicesLabel", "Promote Off-price Items/Services");
			map.put("quarterlySeasonalCampaignLabel", "Establish a quarterly spike/seasonal campaign");
			map.put("utilizeCoopVendorDollarsLabel", "Utilize Co-op/Vendor Dollars");
			map.put("retainCurrentConsumersLabel", "Retain/Recapture Consumers");
			map.put("increaseCustomerVisitsLabel", "Increase Frequency of Customer Visits");
			map.put("increaseTrafficLeadCallsLabel", "Grow New Traffic/Lead Calls");
			map.put("expandTargetConsumersLabel", "Expand Target Consumers (by age, sex, geography)");
			map.put("changeConsumerAttitudesLabel", "Change Consumer Attitudes");
			 
			   map.put("makePromotionalEventsStrongerLabel", "Make PromotionalEvents Stronger"); 
			   map.put("increaseDigitalMobileOnlineResponseLabel","Develop Digital/Mobile/Social Strategies");
			 map.put("developDatabaseMarketingLabel", "Develop Database Marketing (Email and Text)"); 
			 map.put("initiateCauseMarketingProgramLabel", "Initiate Cause Marketing Programs"); 
			 map.put("developSpeciallyStagedEventLabel", "Develop Specially Staged Events");
			 map.put("maintainMarketDominanceLabel", "Maintain Market Dominance"); 
			 map.put("improveBusinessNameBrandLabel", "Elevate Business Brand/Image"); 
			 map.put("establishorReestablishBusinessImageLabel","Improve Reputation and Listing Management");
			 map.put("createPentUpDemandLabel", "Enhance Website (Mobile, Response, SEO,SEM)"); 
			 map.put("increaseMarketShareLabel", "Increase Market Share");
			map.put("otherLabel", "Other:");
			 
		}
		return map;
	}

	public static String findLabelContent(String label) {

		return null;
	}

	/**
	 * Copy an existing file.
	 *
	 * @param service      Drive API service instance.
	 * @param originFileId ID of the origin file to copy.
	 * @param copyTitle    Title of the copy.
	 * @return The copied file if successful, {@code null} otherwise.
	 */
	public static File copyFile(Drive service, String originFileId, String copyName, String generatedFolderId)
			throws Exception {
		mLog.warning("entering copyFile");

		try {
			File copiedFile = new File();
			mLog.info("copiedFile instance");
			copiedFile.setName(copyName);
			copiedFile.setDescription(copyName);
			mLog.info("setname");
			// destinate folder
			copiedFile.setParents(Collections.singletonList(generatedFolderId));
			mLog.info("copiedFile.setParents");
			mLog.info("originFileId [" + originFileId + "]");
			File newFile = service.files().copy(originFileId, copiedFile).execute();
			if (newFile == null) {
				mLog.severe("file is null");
				throw new Exception("file is null");
			}
			mLog.info("newFile id [" + newFile.getId() + "]");
			mLog.warning("exiting copyFile");
			return newFile;
		} catch (IOException e) {
			mLog.severe("ERROR cannot find file " + e.getMessage());
			mLog.warning(" exiting copyFile");
			throw new Exception(e);
		}

	}

	/**
	 * 
	 * @param dataPages
	 * @return pages that are execluded
	 */
	public static List<String> getSlidesExcluded(Iterable<WizardData> dataPages) {
		mLog.warning("entering getSlidesExcluded");
		List<String> slidesList = new ArrayList<String>();
		// get all pages

		for (WizardData data : dataPages) {
			// pull of data model
			PageNameEnum pageName = null;
			try {
				pageName = PageNameEnum.valueOf(data.getPagename());
			} catch (Exception ex) {
				mLog.severe("error " + ex.getMessage());
				continue;
			}

			// exculded
			if (data.isExcluded()) {
				mLog.info("PAGE Excluded id = " + pageName);
				mLog.info("PAGE Excluded name = [" + data.getPagename() + "]");
				slidesList.add(data.getPagename());
				continue;
			}
		} // end of for loop
		mLog.warning("leaving getSlidesExcluded");
		return slidesList;
	}

	/**
	 * 
	 * @param dataPages
	 * @return collection of pages
	 */
	public static List<SlideInterface> getSlidesData(Iterable<WizardData> dataPages) {
		mLog.warning("entering getSlidesData");
		List<SlideInterface> slidesList = new ArrayList<SlideInterface>();
		SlidesData slidesData = new SlidesData();

		PageModels pageModels = new PageModels();
		Publish publish = new Publish();
		// get all pages

		for (WizardData data : dataPages) {
			// pull of data model
			PageNameEnum pageName = null;
			try {
				pageName = PageNameEnum.valueOf(data.getPagename());
			} catch (Exception ex) {
				mLog.severe("error " + ex.getMessage());
				continue;
			}

			// exculded
			if (data.isExcluded()) {
				mLog.info("PAGE Excluded name = " + pageName);
				continue;
			}
			switch (pageName) {

			// ConfidentialClientEvaluationOnePage
			case ClientObjectivesOnePage:
				try {

					ClientObjectivesOnePageModel clientObjectivesOnePageModel = null;
					clientObjectivesOnePageModel = (ClientObjectivesOnePageModel) JSONManager
							.convertFromJson(data.getPagedata(), ClientObjectivesOnePageModel.class);
					List<ClientObjectivesOnePageTwoModel> orderList = ClientObjectivesPageHelper.getList(true,
							clientObjectivesOnePageModel);

					List<Object> pageData = new ArrayList<Object>();
					pageData.add(clientObjectivesOnePageModel);
					pageData.add(orderList);

					slidesData.getPageModels().setOrderList(orderList);
					slidesData.getPageModels().setClientObjectivesOnePageModel(clientObjectivesOnePageModel);
					FourClientObjectiveSlide slideProductService = new FourClientObjectiveSlide(
							"StrategicMarketing_Data_PRODUCT_SERVICE!B1:E", "StrategicMarketing_Data_PRODUCT_SERVICE",
							SlideEnum.ClientObjectivePRODUCTSERVICE, slidesData);
					slidesList.add(slideProductService);
					FourClientObjectiveSlide slideConsumer = new FourClientObjectiveSlide(
							"StrategicMarketing_Data_CONSUMER!B1:E", "StrategicMarketing_Data_CONSUMER",
							SlideEnum.ClientObjectiveCONSUMER, slidesData);
					slidesList.add(slideConsumer);
					FourClientObjectiveSlide slidePromotion = new FourClientObjectiveSlide(
							"StrategicMarketing_Data_Promotion!B1:E", "StrategicMarketing_Data_Promotion",
							SlideEnum.ClientObjectivePROMOTION, slidesData);
					slidesList.add(slidePromotion);
					FourClientObjectiveSlide slideBrand = new FourClientObjectiveSlide(
							"StrategicMarketing_Data_Brand!A1:B", "StrategicMarketing_Data_Brand",
							SlideEnum.ClientObjectiveBRAND, slidesData);
					slidesList.add(slideBrand);

					FourClientObjectiveSlide slideTop = new FourClientObjectiveSlide("Strategic_Marketing_top!A1:E",
							"Strategic_Marketing_top", SlideEnum.ClientObjectiveTop, slidesData);
					slidesList.add(slideTop);

					mLog.info("found page ClientObjectivesOnePageTwoModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case ConfidentialClientEvaluationOnePage:
				try {
					ConfidentialClientEvaluationOnePageModel confidentialClientEvaluationOnePageModel = null;

					confidentialClientEvaluationOnePageModel = (ConfidentialClientEvaluationOnePageModel) JSONManager
							.convertFromJson(data.getPagedata(), ConfidentialClientEvaluationOnePageModel.class);
					List<PieChart> pieChart = ChartBuilder
							.buildLastYearConfidentialClientEvaluation(confidentialClientEvaluationOnePageModel);
					// slide 8
					slidesData.getPublish().setConfidentialClientEvaluationOnePage(true);
					EightConfidentialClientEvaluationOneSlide slideEightConfidentialClientEvaluationOneSlide = new EightConfidentialClientEvaluationOneSlide(
							pieChart, "ConfidentialClientEvaluationOnePage_Data!A1:B",
							"ConfidentialClientEvaluationOnePage", SlideEnum.PieChart);

					slidesList.add(slideEightConfidentialClientEvaluationOneSlide);

					// model.addAttribute("ConfidentialClientEvaluationOnePageLastYearChartModel",
					// pieChart);
					// model.addAttribute("ConfidentialClientEvaluationOnePageModel", pieChart);
					// model.addAttribute("ConfidentialClientEvaluationPageDataModel",
					// confidentialClientEvaluationOnePageModel);

					if (pieChart.size() > 0) {
						publish.setConfidentialClientEvaluationOnePage(true);
					}

					// confidentialClientEvaluationProposedPage
					List<PieChart> pieChartProposed = ChartBuilder
							.buildNextYearConfidentialClientEvaluation(confidentialClientEvaluationOnePageModel);

					// slide 9
					slidesData.getPublish().setConfidentialClientEvaluationProposedPage(true);
					NineConfidentialClientEvaluationProposedSlide nineConfidentialClientEvaluationProposedSlide = new NineConfidentialClientEvaluationProposedSlide(
							pieChartProposed, "ConfidentialClientEvaluationProposedPage_Data!A1:B",
							"ConfidentialClientEvaluationProposed", SlideEnum.PieChart);

					slidesList.add(nineConfidentialClientEvaluationProposedSlide);

					// NineConfidentialClientEvaluationProposedSlide

					// model.addAttribute("ConfidentialClientEvaluationOnePageLastYearChartProposedModel",
					// pieChartProposed);
					// model.addAttribute("ConfidentialClientEvaluationOnePageModel",
					// pieChartProposed);

					if (pieChartProposed.size() > 0) {
						publish.setConfidentialClientEvaluationProposedPage(true);
					}

					mLog.info("found page ConfidentialClientEvaluationOnePageModel");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case CreateConceptOnePage:
				try {
					ExtraPageModel createConceptOnePageModel = null;

					createConceptOnePageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("CreateConceptOnePageModel", createConceptOnePageModel);

					publish.setCreateConceptOnePage(true);
					mLog.info("found page createConceptOnePageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case CreateConceptTwoPage:
				try {
					ExtraPageModel createConceptTwoPageModel = null;

					createConceptTwoPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("CreateConceptTwoPageModel", createConceptTwoPageModel);

					publish.setCreateConceptTwoPage(true);
					mLog.info("found page createConceptTwoPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case DigitalMobileSocialStrategiesPage:
				try {
					ExtraPageModel digitalMobileSocialStrategiesPageModel = null;

					digitalMobileSocialStrategiesPageModel = (ExtraPageModel) JSONManager
							.convertFromJson(data.getPagedata(), ExtraPageModel.class);
					// model.addAttribute("DigitalMobileSocialStrategiesPageModel",
					// digitalMobileSocialStrategiesPageModel);
					mLog.info("found page digitalMobileSocialStrategiesPage");

					publish.setDigitalMobileSocialStrategiesPage(true);

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case MarketPlaceCompetitionPage:
				try {
					MarketPlaceCompetitionPageModel marketPlaceCompetitionPageModel = null;

					marketPlaceCompetitionPageModel = (MarketPlaceCompetitionPageModel) JSONManager
							.convertFromJson(data.getPagedata(), MarketPlaceCompetitionPageModel.class);
					// model.addAttribute("MarketPlaceCompetitionPageModel",
					// marketPlaceCompetitionPageModel);
					slidesData.getPageModels().setMarketPlaceCompetitionPageModel(marketPlaceCompetitionPageModel);
					ThreeMarketPlaceCompetitionSlide slide = new ThreeMarketPlaceCompetitionSlide(slidesData,
							SlideEnum.TextSlideReplacement);
					slidesList.add(slide);
					mLog.info("found page marketingStrategiesPageModel");

					publish.setMarketingStrategiesPage(true);
					publish.setMarketPlaceCompetitionPage(true);
					mLog.info("found page MarketPlaceCompetitionPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case MarketingStrategiesPage:
				try {
					ExtraPageModel marketingStrategiesPageModel = null;

					marketingStrategiesPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("MarketingStrategiesPageModel",
					// marketingStrategiesPageModel);

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanABEPPage:
				try {
					PlanABEPPageModel planABEPPageModel = null;

					planABEPPageModel = (PlanABEPPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanABEPPageModel.class);
					// model.addAttribute("PlanABEPPageModel", planABEPPageModel);

					publish.setPlanABEPPage(true);
					mLog.info("found page PlanABEPPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanADigitalROICalculatorPage:
				try {
					PlanDigitalROICalculatorPageModel planADigitalROICalculatorPageModel = null;

					planADigitalROICalculatorPageModel = (PlanDigitalROICalculatorPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanDigitalROICalculatorPageModel.class);
					// model.addAttribute("PlanADigitalROICalculatorPage",
					// planADigitalROICalculatorPageModel);

					publish.setPlanADigitalROICalculatorPage(true);

					mLog.info("found page PlanADigitalROICalculatorPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case PlanAExcelPage:
				try {
					ExtraPageModel planAExcelPageModel = null;

					planAExcelPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					String textArea = planAExcelPageModel.getTextArea();
					textArea = textArea.replaceAll("\\r\\n", "");
					// mLog.info("text planAExcelPageModel [" + textArea + "]");
					// planAExcelPageModel.setTextArea(textArea);
					// model.addAttribute("PlanAExcelPageModel", planAExcelPageModel);

					publish.setPlanAExcelPage(true);
					mLog.info("found page planAExcelPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanAProposedPage:
				try {
					PlanProposedPageModel planAProposedPageModel = null;

					planAProposedPageModel = (PlanProposedPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanProposedPageModel.class);
					// model.addAttribute("PlanAProposedPageModel", planAProposedPageModel);

					publish.setPlanAProposedPage(true);
					mLog.info("found page planAProposedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBProposedPage:
				try {
					PlanProposedPageModel planBProposedPageModel = null;

					planBProposedPageModel = (PlanProposedPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanProposedPageModel.class);
					// model.addAttribute("PlanBProposedPageModel", planBProposedPageModel);

					// publish.setPlanBProposedPage(true);
					mLog.info("found page planBProposedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanALifetimeValuedPage:
				try {
					PlanALifetimeValuedPageModel planALifetimeValuedPageModel = null;

					planALifetimeValuedPageModel = (PlanALifetimeValuedPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanALifetimeValuedPageModel.class);
					// model.addAttribute("PlanALifetimeValuedPageModel",
					// planALifetimeValuedPageModel);

					mLog.info("found page PlanALifetimeValuedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

//PlanBDigitalROICalculatorPage

				//
			case PlanBLifetimeValuedPage:
				try {
					PlanBLifetimeValuedPageModel planBLifetimeValuedPageModel = null;

					planBLifetimeValuedPageModel = (PlanBLifetimeValuedPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanBLifetimeValuedPageModel.class);
					// model.addAttribute("PlanBLifetimeValuedPageModel",
					// planBLifetimeValuedPageModel);

					mLog.info("found page PlanBLifetimeValuedPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
				//
			case PlanBExcelPage:
				try {
					ExtraPageModel planBExcelPagePageModel = null;

					planBExcelPagePageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("PlanBExcelPageModel", planBExcelPagePageModel);

					mLog.info("found page PlanAExcelPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBBEPPage:
				try {
					PlanBBEPPageModel planBBEPPageModel = null;

					planBBEPPageModel = (PlanBBEPPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanBBEPPageModel.class);
					// model.addAttribute("PlanBBEPPageModel", planBBEPPageModel);

					publish.setPlanBBEPPage(true);
					mLog.info("found page PlanBBEPPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanBDigitalROICalculatorPage:
				try {
					PlanDigitalROICalculatorPageModel planBDigitalROICalculatorPageModel = null;

					planBDigitalROICalculatorPageModel = (PlanDigitalROICalculatorPageModel) JSONManager
							.convertFromJson(data.getPagedata(), PlanDigitalROICalculatorPageModel.class);
					// model.addAttribute("PlanBDigitalROICalculatorPage",
					// planBDigitalROICalculatorPageModel);

					publish.setPlanBDigitalROICalculatorPage(true);
					mLog.info("found page PlanBDigitalROICalculatorPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PlanAMediaPage:
				mLog.info("found page PlanAMediaPage");
				try {
					PlanMediaPageModel planAMediaPagedataPageModel = null;
					planAMediaPagedataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanMediaPageModel.class);
					MediaChart mediaChartA = MediaChartHelper.generate(planAMediaPagedataPageModel);
					// model.addAttribute("PlanAMediaPage", mediaChartA);
					// model.addAttribute("PlanAMediaPagedataPageModel",
					// planAMediaPagedataPageModel);
					if (mediaChartA != null) {

						publish.setPlanAMediaPage(true);

						slidesData.getPublish().setPlanAMediaPage(true);
						SeventeenPlanAMediaSlide seventeenPlanAMediaSlide = new SeventeenPlanAMediaSlide(mediaChartA,
								"PlanAMediaPage_Data!A1:E", "PlanAMediaPage", SlideEnum.BarChart);
						slidesList.add(seventeenPlanAMediaSlide);
						mLog.info("found page SeventeenPlanAMediaSlide");

					}
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

				// PlanAProposedPage
			case PlanBMediaPage:
				mLog.info("found page PlanBMediaPage");
				try {
					PlanMediaPageModel planBMediaPagedataPageModel = null;
					planBMediaPagedataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PlanMediaPageModel.class);
					MediaChart mediaChart = MediaChartHelper.generate(planBMediaPagedataPageModel);
					// model.addAttribute("PlanBMediaPagedataPageModel",
					// planBMediaPagedataPageModel);
					// model.addAttribute("PlanBMediaPage", mediaChart);
					if (mediaChart != null) {

						publish.setPlanBMediaPage(true);

						slidesData.getPublish().setPlanBMediaPage(true);
						TwentyThreePlanBMediaSlide twentyThreePlanBMediaSlide = new TwentyThreePlanBMediaSlide(
								mediaChart, "PlanBMediaPage_Data!A1:E", "PlanBMediaPage", SlideEnum.BarChart);
						slidesList.add(twentyThreePlanBMediaSlide);
						mLog.info("found page TwentyThreePlanBMediaSlide");
						mLog.info("found page TwentyThreePlanBMediaSlide");

					}
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case PresentedToPage:
				try {
					PresentedToPageModel presentedToPageModel = null;

					presentedToPageModel = (PresentedToPageModel) JSONManager.convertFromJson(data.getPagedata(),
							PresentedToPageModel.class);
					// model.addAttribute("PresentedToPage", presentedToPageModel);
					slidesData.getPublish().setPresentedToPage(true);
					slidesData.getPageModels().setPresentedToPageModel(presentedToPageModel);
					OnePresentedToSlide presentedToSlide = new OnePresentedToSlide(slidesData,
							SlideEnum.TextSlideReplacement);
					slidesList.add(presentedToSlide);
					mLog.info("found page PresentedToPage");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case ProfileOfConsumersPage:
				try {
					ExtraPageModel profileOfConsumersPageModel = null;

					profileOfConsumersPageModel = (ExtraPageModel) JSONManager.convertFromJson(data.getPagedata(),
							ExtraPageModel.class);
					// model.addAttribute("ProfileOfConsumersPageModel",
					// profileOfConsumersPageModel);

					publish.setProfileOfConsumersPage(true);

					mLog.info("found page profileOfConsumersPageModel");
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case StrategicMarketingPageOne:
				try {
					StrategicMarketingPageOneModel strategicMarketingPageOneModel = null;

					strategicMarketingPageOneModel = (StrategicMarketingPageOneModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageOneModel.class);
					// model.addAttribute("StrategicMarketingPageOne",
					// strategicMarketingPageOneModel);

					publish.setStrategicMarketingPageOne(true);
					slidesData.getPageModels().setStrategicMarketingPageOneModel(strategicMarketingPageOneModel);

					mLog.info("value found page StrategicMarketingPageOne "
							+ strategicMarketingPageOneModel.getYearsInBusiness());
					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case StrategicMarketingPageThree:
				try {
					StrategicMarketingPageThreeModel strategicMarketingPageThreeModel = null;

					strategicMarketingPageThreeModel = (StrategicMarketingPageThreeModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageThreeModel.class);
					// model.addAttribute("StrategicMarketingPageThree",
					// strategicMarketingPageThreeModel);

					StrategicMarketingHelper strategicMarketingHelper = new StrategicMarketingHelper(
							strategicMarketingPageThreeModel);
					// model.addAttribute("StrategicMarketingHelper", strategicMarketingHelper);

					publish.setStrategicMarketingPageThree(true);
					mLog.info("found page StrategicMarketingPageThree");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case StrategicMarketingPageTwo:
				mLog.info("start StrategicMarketingPageTwo");

				try {
					StrategicMarketingPageTwoModel strategicMarketingPageTwoModel = null;

					strategicMarketingPageTwoModel = (StrategicMarketingPageTwoModel) JSONManager
							.convertFromJson(data.getPagedata(), StrategicMarketingPageTwoModel.class);
					// model.addAttribute("StrategicMarketingPageTwo",
					// strategicMarketingPageTwoModel);

					publish.setStrategicMarketingPageTwo(true);
					mLog.info("found page StrategicMarketingPageTwo");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			case TargetMarketingPage:
				try {
					TargetMarketingPageModel targetMarketingPageModel = null;

					targetMarketingPageModel = (TargetMarketingPageModel) JSONManager
							.convertFromJson(data.getPagedata(), TargetMarketingPageModel.class);
					// model.addAttribute("targetMarketingPageModel", targetMarketingPageModel);
					TargetMarketingHeaderRow targetMarketingHeaderRow = new TargetMarketingHeaderRow(
							targetMarketingPageModel);

					// model.addAttribute("targetMarketingHeaderRow", targetMarketingHeaderRow);

					publish.setTargetMarketingPage(true);
					mLog.info("found page targetMarketingPageModel");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}

			case TeamCommitmentPage:
				try {
					TeamCommitmentPageModel teamCommitmentPageModel = null;

					teamCommitmentPageModel = (TeamCommitmentPageModel) JSONManager.convertFromJson(data.getPagedata(),
							TeamCommitmentPageModel.class);
					// model.addAttribute("TeamCommitmentPage", teamCommitmentPageModel);

					slidesData.getPublish().setTeamCommitmentPage(true);
					slidesData.getPageModels().setTeamCommitmentPageModel(teamCommitmentPageModel);
					TwoTeamCommitmentSlide slide = new TwoTeamCommitmentSlide(slidesData,
							SlideEnum.TextSlideReplacement);
					slidesList.add(slide);
					mLog.info("found page TeamCommitmentPage");

					break;
				} catch (Exception ex) {
					mLog.severe("error " + ex.getMessage());
					break;
				}
			}
			// model.addAttribute("PublishModel", publish);

		}
		// BatchUpdatePresentationRequest update = new BatchUpdatePresentationRequest();
		// update.setRequests(mRequests);
		// googleSlides.presentations().batchUpdate(prez.getPresentationId(),
		// update).execute();
		mLog.warning("leaving getSlidesData");
		return slidesList;
	}

}

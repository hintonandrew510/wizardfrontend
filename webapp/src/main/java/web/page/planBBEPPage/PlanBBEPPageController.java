package web.page.planBBEPPage;

import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.page.planABEPPage.PlanABEPPageModel;
import web.page.planproposedpage.PlanProposedPageModel;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;

@Controller // This means that this class is a Controller
public class PlanBBEPPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(PlanBBEPPageController.class.getName());

	@RequestMapping(value = "/PlanBBEPPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanBBEPPage.getPageSequence(),
				wizard.getWizardid());
		PlanBBEPPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (PlanBBEPPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					PlanBBEPPageModel.class);

		}

		WizardData wizardDataOther = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.PlanABEPPage.getPageSequence(), wizard.getWizardid());
		PlanABEPPageModel dataPageModelOther = null;
		if (wizardDataOther != null) {
			dataPageModelOther = (PlanABEPPageModel) JSONManager.convertFromJson(wizardDataOther.getPagedata(),
					PlanABEPPageModel.class);
		}

		WizardData wizardDataThird = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.PlanBProposedPage.getPageSequence(), wizard.getWizardid());
		PlanProposedPageModel dataPageModelThird = null;
		if (wizardDataThird != null) {
			dataPageModelThird = (PlanProposedPageModel) JSONManager.convertFromJson(wizardDataThird.getPagedata(),
					PlanProposedPageModel.class);
		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("dataPageModelOther", dataPageModelOther);
		model.addAttribute("dataPageModelThird", dataPageModelThird);
		model.addAttribute("wizard", wizard);
		return "pages/PlanBBEPPage";
	}

	@RequestMapping(value = "/savePlanBBEPPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId, @RequestParam(defaultValue = "") String wizarddataid,
			@RequestParam(defaultValue = "") String planBAverageSale,
			@RequestParam(defaultValue = "") String planBGrossMargin,
			@RequestParam(defaultValue = "") String planBClosingPct,
			@RequestParam(defaultValue = "") String planBProspectValue,
			@RequestParam(defaultValue = "") String planBInvestment,
			@RequestParam(defaultValue = "") String planBProspectsNeeded,
			@RequestParam(defaultValue = "") String planBProspectSalesNeeded,
			@RequestParam(defaultValue = "") String planBGrossProfitOnSales,
			@RequestParam(defaultValue = "") String planBMonths,
			@RequestParam(defaultValue = "") String planBAdditionalGrossSales, @RequestParam String previousPage,
			@RequestParam String publishPage, @RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish,
			@RequestParam(required = false, value = "previous") String previous, @RequestParam String nextPage) {
		mLog.info("starting save");
		// internal next page or publish

		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage = publishPage;
		}
		if (previous != null) {
			internalNextPage = previousPage;
		}

		WizardData wizardData = new WizardData();
		wizardData.setPagename(PageNameEnum.PlanBBEPPage.toString());
		wizardData.setPagesequence(Pages.PlanBBEPPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);

		PlanBBEPPageModel pageModel = new PlanBBEPPageModel(planBAverageSale, planBGrossMargin, planBClosingPct,
				planBProspectValue, planBInvestment, planBProspectsNeeded, planBProspectSalesNeeded,
				planBGrossProfitOnSales, planBMonths, planBAdditionalGrossSales);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

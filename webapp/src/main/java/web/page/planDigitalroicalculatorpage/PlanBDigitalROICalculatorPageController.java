package web.page.planDigitalroicalculatorpage;

import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;

import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class PlanBDigitalROICalculatorPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(PlanBDigitalROICalculatorPageController.class.getName());

	@RequestMapping(value = "/PlanBDigitalROICalculatorPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID, HttpSession session) {
		mLog.info("starting detail");
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(
				Pages.PlanBDigitalROICalculatorPage.getPageSequence(), wizard.getWizardid());
		PlanDigitalROICalculatorPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (PlanDigitalROICalculatorPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					PlanDigitalROICalculatorPageModel.class);

		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanBDigitalROICalculatorPage";
	}

	@RequestMapping(value = "/savePlanBDigitalROICalculatorPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId, @RequestParam String wizarddataid,
			@RequestParam(value = "excluded", required = false) String excluded,
			@RequestParam(defaultValue = "") String planAMonthlyDigitalInvestment,
			@RequestParam(defaultValue = "") String planACostPerThousand,
			@RequestParam(defaultValue = "") String planAClosingPctNumber,
			@RequestParam(defaultValue = "") String planAClickThroughRate,
			@RequestParam(defaultValue = "") String planACostPerClicks,
			@RequestParam(defaultValue = "") String planAMonthlyClicks,
			@RequestParam(defaultValue = "") String planASalesConversionPercentage,
			@RequestParam(defaultValue = "") String planAMonthlyConversions,
			@RequestParam(defaultValue = "") String planACostPerConversion,
			@RequestParam(defaultValue = "") String planAProjectedGrossProfit,
			@RequestParam(defaultValue = "") String planAMonthlyROIP,
			@RequestParam(defaultValue = "") String planAMonthlyGrossProfit,
			@RequestParam(defaultValue = "") String planAMonthlyROID, @RequestParam String previousPage,
			@RequestParam String publishPage, @RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish,
			@RequestParam(required = false, value = "previous") String previous, @RequestParam String nextPage, HttpSession session) {

		mLog.info("starting save");
		// internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage = publishPage;
		}
		if (previous != null) {
			internalNextPage = previousPage;
		}
		WizardData wizardData = new WizardData();
		boolean shouldExclude = excluded != null ? true: false;
		wizardData.setExcluded(shouldExclude);	
		wizardData.setPagename(PageNameEnum.PlanBDigitalROICalculatorPage.toString());
		wizardData.setPagesequence(Pages.PlanBDigitalROICalculatorPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		wizardId = session.getAttribute("ID").toString();
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);

		PlanDigitalROICalculatorPageModel pageModel = new PlanDigitalROICalculatorPageModel(
				planAMonthlyDigitalInvestment, planACostPerThousand, planAClosingPctNumber, planAClickThroughRate,
				planAMonthlyClicks, planACostPerClicks, planASalesConversionPercentage, planAMonthlyConversions,
				planACostPerConversion, planAProjectedGrossProfit, planAMonthlyGrossProfit, planAMonthlyROID,
				planAMonthlyROIP);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

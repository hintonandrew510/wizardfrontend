package web.page.extra;

import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.page.presentedtopage.PresentedToPageController;
import web.page.presentedtopage.PresentedToPageModel;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
@Controller    // This means that this class is a Controller
public class ExtraPageControl {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(ExtraPageControl.class.getName());
	@RequestMapping(value = "/PlanAFlightDatesPage", method = RequestMethod.GET)
	public String detailPlanAFlightDatesPage(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		//get wizard header 
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanAFlightDatesPage.getPageSequence(), wizard.getWizardid());
		ExtraPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel =(ExtraPageModel)JSONManager.convertFromJson(wizardData.getPagedata(), ExtraPageModel.class);
			
		}
		//DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanAFlightDatesPage";
	}
	@RequestMapping(value = "/PlanBFlightDatesPage", method = RequestMethod.GET)
	public String detailPlanBFlightDatesPage(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		//get wizard header 
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanBFlightDatesPage.getPageSequence(), wizard.getWizardid());
		ExtraPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel =(ExtraPageModel)JSONManager.convertFromJson(wizardData.getPagedata(), ExtraPageModel.class);
			
		}
		//DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanBFlightDatesPage";
	}
	
}

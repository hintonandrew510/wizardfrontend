package web.page.strategicmarketingpage;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;

import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;


@Controller    // This means that this class is a Controller
public class StrategicMarketingPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(StrategicMarketingPageController.class.getName());
	@RequestMapping(value = "/StrategicMarketingPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		//get wizard header 
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.StrategicMarketing.getPageSequence(), wizard.getWizardid());
		StrategicMarketingPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel =(StrategicMarketingPageModel)JSONManager.convertFromJson(wizardData.getPagedata(), StrategicMarketingPageModel.class);
			
		}
		//DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/StrategicMarketing";
	}
	
	@RequestMapping(value = "/saveMarketPlaceCompetitionPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId
			,@RequestParam String firstTierBusiness
			,@RequestParam String secondTierBusiness
			
			,@RequestParam String wizarddataid
			,@RequestParam String nextPage
			,@RequestParam String publishNextPage
			,@RequestParam(required=false, value="next") String next
	        ,@RequestParam(required=false, value="publish") String publish){
		mLog.info("starting save");
		
		int yearsInBusiness =0;
		int numberOfLocations = 0;
		boolean planToExpand = false;
		String misconceptions = ""; 
		String sellingAdvantages = "";
		String companyNameProjectImage = "";
		String currentCompanySlogan = "";
		boolean companySloganProjectImageYes = false;
		
		
		
		//internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage= publishNextPage;
		}
		
		WizardData wizardData = new WizardData();
	    wizardData.setPagename(PageNameEnum.MarketPlaceCompetitionPage.toString());
		wizardData.setPagesequence(Pages.MARKETPLACECOMPETITIONPAGE.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0 ) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		StrategicMarketingPageModel pageModel  = new StrategicMarketingPageModel( yearsInBusiness, numberOfLocations,planToExpand,
				misconceptions, sellingAdvantages, companyNameProjectImage,
				currentCompanySlogan, companySloganProjectImageYes);
		String pageData = JSONManager.convertToJson(pageModel);
		
		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		//model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

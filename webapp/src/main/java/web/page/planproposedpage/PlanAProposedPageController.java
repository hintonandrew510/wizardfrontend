package web.page.planproposedpage;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;


@Controller    // This means that this class is a Controller
public class PlanAProposedPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(PlanAProposedPageController.class.getName());
	@RequestMapping(value = "/PlanAProposedPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		//get wizard header 
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanAProposedPage.getPageSequence(), wizard.getWizardid());
		PlanProposedPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel =(PlanProposedPageModel)JSONManager.convertFromJson(wizardData.getPagedata(),PlanProposedPageModel.class);
			
		}
		//DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanAProposedPage";
	}
	
	@RequestMapping(value = "/savePlanAProposedPage", method = RequestMethod.POST) // replace with my class variables
	public String save(@RequestParam String wizardId
			,@RequestParam (defaultValue ="") String  planACity 
			,@RequestParam (defaultValue ="") String planAReach
			,@RequestParam (defaultValue ="") String planAFrequency
			,@RequestParam (defaultValue ="") String planADigitalImpressionsMonthly
			,@RequestParam (defaultValue ="") String planAMonthly
			,@RequestParam (defaultValue ="") String planADaily
			,@RequestParam String wizarddataid // must stay
			,@RequestParam String previousPage
			,@RequestParam String publishPage
			,@RequestParam(required=false, value="next") String next
	        ,@RequestParam(required=false, value="publish") String publish
	        ,@RequestParam(required=false, value="previous") String previous
	        ,@RequestParam String nextPage){
		mLog.info("starting save");
		
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage= publishPage;
		}
		if (previous != null) {
			internalNextPage= previousPage;
        }
			
		
		WizardData wizardData = new WizardData();
		wizardData.setPagename(PageNameEnum.PlanAProposedPage.toString());
		wizardData.setPagesequence(Pages.PlanAProposedPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0 ) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt); //todo - fix constuctor
		PlanProposedPageModel demographic  = new PlanProposedPageModel(planACity, planAReach, planAFrequency,
				planADigitalImpressionsMonthly, planAMonthly, planADaily);
		String pageData = JSONManager.convertToJson(demographic);
		
		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		//model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
	
}

package web.page.strategicmarketingpageone;

import java.util.Optional;
import java.util.logging.Logger;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;

import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class StrategicMarketingPageOneController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(StrategicMarketingPageOneController.class.getName());

	@RequestMapping(value = "/StrategicMarketingPageOne", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID, HttpSession session) {
		mLog.info("starting detail");
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
			Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.StrategicMarketingOne.getPageSequence(), wizard.getWizardid());
		StrategicMarketingPageOneModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (StrategicMarketingPageOneModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					StrategicMarketingPageOneModel.class);

		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/StrategicMarketingPageOne";
	}

	@RequestMapping(value = "/saveStrategicMarketingPageOne", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId, @RequestParam String wizarddataid,
			@RequestParam(value = "excluded", required = false) String excluded,
			@RequestParam(value = "yearsInBusiness", defaultValue = "0") String yearsInBusinessStr,
			@RequestParam(value = "numberOfLocations", defaultValue = "0") String numberOfLocationsStr,
			@RequestParam(value = "currentCompanySlogan", defaultValue = "") String currentCompanySlogan,
			@RequestParam(value = "planToExpand", defaultValue = "false") boolean planToExpand,
			@RequestParam(defaultValue = "", value = "misconceptions") String misconceptions,
			@RequestParam(defaultValue = "", value = "sellingAdvantages") String sellingAdvantages,
			@RequestParam(defaultValue = "", value = "companyNameProjectImage") String companyNameProjectImage,
			@RequestParam(defaultValue = "", value = "companySloganvantages") String companySloganvantages,
			@RequestParam(value = "companySloganProjectImage", defaultValue = "false") boolean companySloganProjectImage,
			@RequestParam String nextPage, @RequestParam String publishPage, @RequestParam String previousPage

			, @RequestParam(required = false, value = "previous") String previous,
			@RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish, HttpSession session) {
		mLog.info("starting save");

		int yearsInBusiness = Integer.valueOf(yearsInBusinessStr);
		int numberOfLocations = Integer.valueOf(numberOfLocationsStr);

		// internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage = publishPage;
		}
		if (previous != null) {
			internalNextPage = previousPage;
		}

		WizardData wizardData = new WizardData();
		boolean shouldExclude = excluded != null ? true: false;
		wizardData.setExcluded(shouldExclude);
		wizardData.setPagename(PageNameEnum.StrategicMarketingPageOne.toString());
		wizardData.setPagesequence(Pages.StrategicMarketingOne.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		wizardId = session.getAttribute("ID").toString();
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		StrategicMarketingPageOneModel pageModel = new StrategicMarketingPageOneModel(yearsInBusiness,
				numberOfLocations, planToExpand, misconceptions, sellingAdvantages, companyNameProjectImage,
				currentCompanySlogan, companySloganProjectImage);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

package web.page.marketplacecompetitionpage;

import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class MarketPlaceCompetitionPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = LoggerFactory.getLogger(MarketPlaceCompetitionPageController.class.getName());

	@RequestMapping(value = "/MarketPlaceCompetitionPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID, HttpSession session) {
		mLog.info("starting detail");
		// get wizard header
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
	
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(
				Pages.MARKETPLACECOMPETITIONPAGE.getPageSequence(), wizard.getWizardid());
		MarketPlaceCompetitionPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (MarketPlaceCompetitionPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					MarketPlaceCompetitionPageModel.class);

		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/MarketPlaceCompetitionPage";
	}

	@RequestMapping(value = "/saveMarketPlaceCompetitionPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId,
			@RequestParam(value = "excluded", required = false) String excluded,
			@RequestParam(required = false, value = "") String firstTierBusiness,
			@RequestParam(required = false, value = "") String secondTierBusiness,
			@RequestParam(required = false, value = "") String thirdTierBusiness,
			@RequestParam(required = false, value = "") String fourthTierBusiness,
			@RequestParam(required = false, value = "") String competitionA,
			@RequestParam(required = false, value = "") String competitionB,
			@RequestParam(required = false, value = "") String competitionStrengthA,
			@RequestParam(required = false, value = "") String competitionStrengthB,
			@RequestParam(required = false, value = "") String competitionWeaknessA,
			@RequestParam(required = false, value = "") String competitionWeaknessB,
			@RequestParam(required = false, value = "") String wizarddataid, @RequestParam String previousPage,
			@RequestParam String publishPage, @RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish,
			@RequestParam(required = false, value = "previous") String previous, @RequestParam String nextPage, HttpSession session) {
		mLog.info("starting save");
		boolean shouldExclude = excluded != null ? true: false;
		// internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage = publishPage;
		}
		if (previous != null) {
			internalNextPage = previousPage;
		}

		WizardData wizardData = new WizardData();
		wizardData.setExcluded(shouldExclude);
		wizardData.setPagename(PageNameEnum.MarketPlaceCompetitionPage.toString());
		wizardData.setPagesequence(Pages.MARKETPLACECOMPETITIONPAGE.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		wizardId = session.getAttribute("ID").toString();
		mLog.info("decryptID " + wizardId);
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		MarketPlaceCompetitionPageModel pageModel = new MarketPlaceCompetitionPageModel(firstTierBusiness,
				secondTierBusiness, thirdTierBusiness, fourthTierBusiness, competitionA, competitionB,
				competitionStrengthA, competitionStrengthB, competitionWeaknessA, competitionWeaknessB);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

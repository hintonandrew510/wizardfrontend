package web.page.planamedipage;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;

import web.page.JSONManager;
import web.page.PageNameEnum;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;


@Controller    // This means that this class is a Controller
public class PlanBMediaPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;
	
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = Logger.getLogger(PlanBMediaPageController.class.getName());
	@RequestMapping(value = "/PlanBMediaPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID) {
		mLog.info("starting detail");
		//get wizard header 
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(ID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanBMediaPage.getPageSequence(), wizard.getWizardid());
		PlanMediaPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel =(PlanMediaPageModel)JSONManager.convertFromJson(wizardData.getPagedata(), PlanMediaPageModel.class);
			
		}
		//DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanBMediaPage";
	}
	
	@RequestMapping(value = "/importPlanAMediaPage", method = RequestMethod.POST)
	public String copyMediaPlanAtoB(@RequestParam String wizardId
			,@RequestParam String wizarddataid
			,@RequestParam String nextPage){
		mLog.info("starting importPlanAMediaPage");
		//internal next page or publish
		String internalNextPage = nextPage;
		
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(wizardId));
		Wizard wizard = wizardOpt.orElse(null);
		//get plan a to copy to plan b
		WizardData wizardData = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanAMediaPage.getPageSequence(), wizard.getWizardid());
	
	    if (wizardData != null ) {
	    	PlanMediaPageModel dataPageModel = null;
	    	dataPageModel =(PlanMediaPageModel)JSONManager.convertFromJson(wizardData.getPagedata(), PlanMediaPageModel.class);
	    	String pageData = JSONManager.convertToJson(dataPageModel);
	    	//get plan b 
	    	WizardData wizardDataB = wizardDataRepository.findByPagesequenceAndWizardid(Pages.PlanBMediaPage.getPageSequence(), wizard.getWizardid());
	    	
	    	wizardDataB.setPagename(PageNameEnum.PlanBMediaPage.toString());
	    	wizardDataB.setPagesequence(Pages.PlanBMediaPage.getPageSequence());
	 		if (wizarddataid != null && wizarddataid.trim().length() > 0 ) {
	 			Integer wizardDataInt = Integer.valueOf(wizarddataid);
	 			wizardDataB.setWizarddataid(wizardDataInt);
	 		}
	 		Integer wizardIdInt = Integer.valueOf(wizardId);
	 		wizardDataB.setWizardid(wizardIdInt);
	 		wizardDataB.setPagedata(pageData);
			wizardDataRepository.save(wizardDataB);
	    }
		//model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
	
	
	@RequestMapping(value = "/savePlanBMediaPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId
			,@RequestParam String wizarddataid
			,@RequestParam(required=false, value="") String jantype
			,@RequestParam(required=false, value="") String febtype
			,@RequestParam(required=false, value="") String martype
			,@RequestParam(required=false, value="") String aprtype
			,@RequestParam(required=false, value="") String maytype
			,@RequestParam(required=false, value="") String juntype
			,@RequestParam(required=false, value="") String jultype
			,@RequestParam(required=false, value="") String augtype
			,@RequestParam (required=false, value="") String septype
			,@RequestParam (required=false, value="") String octtype
			,@RequestParam (required=false, value="") String novtype
			,@RequestParam (required=false, value="") String dectype
			,@RequestParam (required=false, value="") String mediarows
			,@RequestParam String nextPage
			,@RequestParam String publishPage
			,@RequestParam(required=false, value="next") String next
	        ,@RequestParam(required=false, value="publish") String publish){
		mLog.info("starting save");
		//internal next page or publish
		String internalNextPage = nextPage;
		if (publish != null) {
			internalNextPage= publishPage;
		}
		
		WizardData wizardData = new WizardData();
	    wizardData.setPagename(PageNameEnum.PlanBMediaPage.toString());
		wizardData.setPagesequence(Pages.PlanBMediaPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0 ) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		List<MediaRow> mediaRowList = null;
		PlanMediaPageModel pageModel  = new PlanMediaPageModel(jantype, febtype, martype, aprtype, maytype,
				juntype, jultype, augtype,septype, octtype, novtype, dectype,mediarows,
				mediaRowList);
		String pageData = JSONManager.convertToJson(pageModel);
		
		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		//model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}

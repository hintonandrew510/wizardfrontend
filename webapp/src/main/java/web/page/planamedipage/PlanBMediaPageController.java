package web.page.planamedipage;

import java.util.List;
import java.util.Optional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import web.model.Wizard;
import web.model.WizardData;
import web.page.Pages;
import web.repository.WizardDataRepository;
import web.repository.WizardRepository;
import web.page.JSONManager;
import web.page.PageNameEnum;
import web.util.EncryptionDecryptionManager;

@Controller // This means that this class is a Controller
public class PlanBMediaPageController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardRepository wizardRepository;

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private WizardDataRepository wizardDataRepository;

	private static final Logger mLog = LoggerFactory.getLogger(PlanBMediaPageController.class.getName());

	@RequestMapping(value = "/PlanBMediaPage", method = RequestMethod.GET)
	public String detail(Model model, @RequestParam String ID, HttpSession session) {
		mLog.info("starting detail");
		mLog.info("starting detail");
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
		Wizard wizard = wizardOpt.orElse(null);
		WizardData wizardData = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.PlanBMediaPage.getPageSequence(), wizard.getWizardid());
		PlanMediaPageModel dataPageModel = null;
		if (wizardData != null) {
			dataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					PlanMediaPageModel.class);

		}
		// DemographicManager.convertFromJson(json)
		model.addAttribute("wizardData", wizardData);
		model.addAttribute("dataPageModel", dataPageModel);
		model.addAttribute("wizard", wizard);
		return "pages/PlanBMediaPage";
	}

	@RequestMapping(value = "/importPlanAMediaPage", method = RequestMethod.POST)
	public String copyMediaPlanAtoB(@RequestParam String wizardId, @RequestParam String wizarddataid,
			@RequestParam String nextPage, HttpSession session) {
		mLog.info("starting importPlanAMediaPage");
		// internal next page or publish
		String internalNextPage = nextPage;


		mLog.info("starting detail");
		String decryptID = session.getAttribute("ID").toString();
		mLog.info("decryptID " + decryptID);
		// get wizard header
		Optional<Wizard> wizardOpt = wizardRepository.findById(Integer.valueOf(decryptID));
	
		
		
		Wizard wizard = wizardOpt.orElse(null);
		// get plan a to copy to plan b
		WizardData wizardData = wizardDataRepository
				.findByPagesequenceAndWizardid(Pages.PlanAMediaPage.getPageSequence(), wizard.getWizardid());
		mLog.info("look for plan a");
		if (wizardData != null) {
			mLog.info("found plan a");
			PlanMediaPageModel dataPageModel = null;
			dataPageModel = (PlanMediaPageModel) JSONManager.convertFromJson(wizardData.getPagedata(),
					PlanMediaPageModel.class);
			String pageData = JSONManager.convertToJson(dataPageModel);
			// get plan b
			mLog.info("find plan b");
			mLog.info("page name = " + PageNameEnum.PlanBMediaPage.toString());
			WizardData wizardDataB = wizardDataRepository
					.findByPagesequenceAndWizardid(Pages.PlanBMediaPage.getPageSequence(), wizard.getWizardid());

			if (wizardDataB == null) {
				wizardDataB = new WizardData();
			}

			wizardDataB.setPagename(PageNameEnum.PlanBMediaPage.toString());
			wizardDataB.setPagesequence(Pages.PlanBMediaPage.getPageSequence());
			if (wizarddataid != null && wizarddataid.trim().length() > 0) {
				Integer wizardDataInt = Integer.valueOf(wizarddataid);
				wizardDataB.setWizarddataid(wizardDataInt);
			}
			Integer wizardIdInt = Integer.valueOf(decryptID);
			wizardDataB.setWizardid(wizardIdInt);
			wizardDataB.setPagedata(pageData);
			wizardDataRepository.save(wizardDataB);
		}
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}

	@RequestMapping(value = "/savePlanBMediaPage", method = RequestMethod.POST)
	public String save(@RequestParam String wizardId, @RequestParam String wizarddataid,
			@RequestParam(value = "excluded", required = false) String excluded,
			@RequestParam(required = false, value = "") String jantype,
			@RequestParam(required = false, value = "") String febtype,
			@RequestParam(required = false, value = "") String martype,
			@RequestParam(required = false, value = "") String aprtype,
			@RequestParam(required = false, value = "") String maytype,
			@RequestParam(required = false, value = "") String juntype,
			@RequestParam(required = false, value = "") String jultype,
			@RequestParam(required = false, value = "") String augtype,
			@RequestParam(required = false, value = "") String septype,
			@RequestParam(required = false, value = "") String octtype,
			@RequestParam(required = false, value = "") String novtype,
			@RequestParam(required = false, value = "previous") String previous,
			@RequestParam(required = false, value = "") String dectype,@RequestParam String previousPage,
			@RequestParam(required = false, value = "") String mediarows,
			@RequestParam String publishPage, @RequestParam(required = false, value = "next") String next,
			@RequestParam(required = false, value = "publish") String publish, HttpSession session) {
		mLog.info("starting save");
		// internal next page or publish
		String internalNextPage = previousPage;
		
		if (publish != null) {
			internalNextPage = publishPage;
		}

		WizardData wizardData = new WizardData();
		boolean shouldExclude = excluded != null ? true: false;
		wizardData.setExcluded(shouldExclude);				
				
		wizardData.setPagename(PageNameEnum.PlanBMediaPage.toString());
		wizardData.setPagesequence(Pages.PlanBMediaPage.getPageSequence());
		if (wizarddataid != null && wizarddataid.trim().length() > 0) {
			Integer wizardDataInt = Integer.valueOf(wizarddataid);
			wizardData.setWizarddataid(wizardDataInt);
		}
		wizardId = session.getAttribute("ID").toString();
		Integer wizardIdInt = Integer.valueOf(wizardId);
		wizardData.setWizardid(wizardIdInt);
		List<MediaRow> mediaRowList = null;
		PlanMediaPageModel pageModel = new PlanMediaPageModel(jantype, febtype, martype, aprtype, maytype, juntype,
				jultype, augtype, septype, octtype, novtype, dectype, mediarows, mediaRowList);
		String pageData = JSONManager.convertToJson(pageModel);

		wizardData.setPagedata(pageData);
		wizardDataRepository.save(wizardData);
		// model.addAttribute("wizard", wizard);
		return internalNextPage;
	}
}
